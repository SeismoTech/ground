package org.seismotech.ground.cursor;

#set($lowtypes = [
  "boolean", "byte", "char", "short", "int", "long", "float", "double"
])

import java.util.Comparator;

import org.seismotech.ground.lang.Comparisons;

/**
 * A cursor giving access to <i>monolithic</i> value of type {@code T}.
 */
public interface CursorOf<T> extends Cursor {
  T value();

  //----------------------------------------------------------------------
  #foreach($type in $lowtypes)
  #set($Type = $ppy.java.boxedType($type))
  #set($Klass = $ppy.capitalize($type) + "s")

  static interface $Klass extends CursorOf<$Type> {
    $type ${type}Value();
    @Override default $Type value() {return ${type}Value();}
  }

  static class ${Klass}Comparator implements Comparator<$Klass> {
    public static final ${Klass}Comparator THE = new ${Klass}Comparator();

    @Override public int compare($Klass a, $Klass b) {
      return Comparisons.cmp(a.${type}Value(), b.${type}Value());
    }
  }

  #end

  public static class ComparableComparator<T extends Comparable<T>>
    implements Comparator<CursorOf<T>> {
    @Override public int compare(CursorOf<T> a, CursorOf<T> b) {
      return Comparisons.cmp(a.value(), b.value());
    }
  }

  public static class AnyComparator<T> implements Comparator<CursorOf<T>> {
    private final Comparator<T> cmp;

    public AnyComparator(Comparator<T> cmp) {this.cmp = cmp;}

    @Override public int compare(CursorOf<T> a, CursorOf<T> b) {
      return Comparisons.cmp(cmp, a.value(), b.value());
    }
  }
}
